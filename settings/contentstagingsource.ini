### these parameters apply on source-servers

[GeneralSettings]
# list of target feed ids - every id should be <= 255 chars
TargetList[]

# for every target server, define some params
#[Target_xxx]

# User-visible name for the feed
#Name=

# and its description
#Description=

# name of php class used to implement transport - mandatory
# available so far: eZRestApiGGWSClientStagingTransport
#TransportClass=

# for eZRestApiGGWSClientStagingTransport: name of server as defined in wsproviders.ini
#Server=

# class used to build the remote ids of remote objects/nodes
# available so far: eZContentStagingSameRemoteIdGenerator (default) and eZContentStagingLocalAsRemoteIdGenerator
# . eZContentStagingSameRemoteIdGenerator: the remote ids of objects/nodes are going to be the same
#   on the source and target server. This mode is recommended, as it is compatible
#   with eg. the packaging system. There is only one drwaback: if the target server
#   has existing content already created when the staging starts, there is a small
#   chance of getting remote id collinsions.
# . eZContentStagingLocalAsRemoteIdGenerator: the remote ids used on the target server
#   use a different format: "ezcs:<feedname>:<source id>"
#   This should be used for specific cases such as:
#   - the target server is in fact the same eZ database as the source server
#   - a target server accepts feeds from many diffferent sources
#RemoteIdGeneratorClass=eZContentStagingSameRemoteIdGenerator

# use content creation date on source server also on target (opposed to the
# default being of using the synchronization date as creation date for target)
#UseSourceCreationDatesOnTarget=disabled

# use content creator account on source server also on target (opposed to the
# default of using a single account for all content creation)
# NB: not available yet
#UseSourceOwnerOnTarget=disabled

# list of content subtrees (ie. node ids) to sync - at least one is mandatory
#Subtrees[]

# for each local subtree to sync, we need the node id of the corresponding node on the target server,
# otherwise synchronization can not be started
#RemoteSubtrees[]

# filters can be set up so that some events are not added / logged / modified the
# moment they get into the queue.
# This array must consist of php class names - those classes must respect an interface
# Classes provided with the extension:
# . eZContentStagingEventCreationLoggingFilter - logs in the eZ debug log every event
#EventCreationFilters[]

# filter that can be set up so that some content object attributes are not sent
# to the target server (ie. they will not be serialized into the requests for
# object creation and update)
# This value is expected to be a class name - that class must implement an interface.
# Classes provided with the extension:
# . eZContentStagingGhostintheshellFieldFilter - sends no attribute whatsoever
#FieldFilterClass=