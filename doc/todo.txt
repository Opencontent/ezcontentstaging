1 - DATATYPE ENCODING
. finish serialization/deserialization support of all datatypes:
  - ezpage:
    test more for correctness of manual blocks
    need to finish: translation of node_ids when they are set in auto/custom blocks parameters (ok for encoding, needs decoding)
    replace the xml serialization of attribute with pure json (phase 2 or 3?)
  - matrix, ezcomments, ezmbpaex
  - webshop datatypes: multiprice, option, price, product category, range option
  - deprecated datatypes: enum, inisetting, multioption, package, subtree subscription

. add support for sending in object creation/modification requests the remote_id of creator user
  - add support for importing that data into target system (this means NOT having to connect uisng every different user account to the target server)


2 - EVENTS

. test all events:
  . test "swap"
  . do they play nice if a "wait until" event is placed 1st in their workflow?

. handling of dependencies between events
  - source server: when sending an event of type delete (no trash), we should also remove from local queue all pending events for the given object (and maybe warn user too before doing so)
  - source server: logical bug: if local obj has been deleted (no trash) and there are pending publication events for it, we will not be able to sync them anymore
    => warn editor (on delete or on sync?), remove pending events, or... ?
  - source server: when sending creation event for an object but creation events for parent(s) are pending, warn user
  - source server: when sending creation/update event for an object but creation events for related objects are pending, warn user
  - source server: when sending update-visibility event for an object but there are more earlier update-visibility events pending in the queue, warn user (as sending the eralier ones afterwards will not do)
  - same as above for section, sorting, etc...
  - etc...


3 - REST API

. test all actions
  - review actions that might actually fail on target server without sending back a failure code
  - review all operations that check for user perms vs. those that do not, implement proper perms checking

. test: is view cache expired correctly on all occasions when updating an object?
  - object state change does not seem to expire view cache of obj
  - sorting_of_children change does not seem to expire view cache of obj
  - priority change does not seem to expire view cache of parent node
  - setting section does not seem to expire view cache of obj
  - add location: ok (on node; parents not tested)
  - remove location: ok (on node; parents not tested)
  - publish: ok

. test: what happens when sending completely bogus data? test for
  remote id
  sorting
  priority
  section
  ...

. target server: test content creation/modification triggers used on target server too, to make server chaining possible

. [bug] target server: when creating a new object+node, the remote_id of the node is set
  with a separate rest call after the publication trigger has run on target server
  -> is chaining of target servers possible at all?


4 - INTERFACE

. source server: finish js code used by ajax calls for ezwt (it misses checking of return value, alert, changing icon state)

. source server: proper policy checking before allowing sync calls (ok in "feed" view; remains to be seen in ezjscore calls)

. source server: settle on naming conventions (user-side), rewrite all text labels in templates

. source server: settle on set of sync icons: needs to sync, is syncing, no need to sync

. settle on list of cols available in feed view and in dashboard block; make sure that it works ok for items relating to deleted nodes (showing enough info)

. source server: in wt tpl, try to filter out items in syncing status (show a different icon, do not allow to sync)

. language deletion events: show deleted language in admin interface panel?


Phase 1.5 (move to phase 2 ?)

. source server: allow admin user to delete events in pending status too (after confirmation dialog or via cli script)

. source server: finish cli scripts that reset and initialize feeds. Also creates a publish event for all of content (same az efindexcontents)
  - make sure the following case can be detected + fixed: obj has been created
    with correct remote id, and its node too, but node remote_id does match between
    local and remote

. source server: add confirmation dialogs when deleting events / resetting feeds

. source server: when executing an action, use an http redirect so that landing page can be refreshed via F5

. dependency tracking:
  - all events should not have a pending create event for any of their parents (or they cannot be synced)
  - obj relations?
  - set section: should not have a pending set section for one of its parents (nb: even for 2ndary locations? test it)
  - hide: should not have a pending set section for one of its parents

. source server: refactor diffing of content in separate classes

. source server: output of checknode view - make it available via ezjscore

. add setup-wizard to create and init targets

. as part of the work done by the stup wizard (source server), there needs to be a call to get the exact version of the rest-api found on the target server,
  so that if we have a target server implementing a slightly different api, we can pick the correct transport class to use

. make it easier to subclass both the transport class and the field-encoding class to change just a bit of them
  (refactor away the huge switch calls)


Phase 2:

. rest server: fix bug: when using basic auth, eZ sends 2 session cookies (see bug #18752)
. source server: allow sync items that fail 3 consecutive sync attempts to be set to "suspended" state
. source server: allow finer grained permissions (sync per feed, also sync only events that you have generated)
. source server: cronjob that passes and removes/resets sync items that have been in sync status for too long
. source server: coalescing of sync events
. add a sync-to-localhost transport class, that copies data to separate content trees without going through rest calls
. source server: graceful degradation: allow wt button to sync with no js available by posting to contentstaging/syncnode
. source server: add extended attr. filter: given target feed id, get for every node the sync events pending by using aggregate sql function bit_and
. source server: use some "struct" classes to hold data for every type of stagingevent instead of plain arrays, to make the kind of data expected more evident
. for ezp 4.6, add also to the media gallery (and to users?) the new subtab added to object view for admin2 design
  - also maybe add extra items to context menus?
. source server: finish case where a move event becomes a create for a target server (create all versions, all languages)
. verify events that need to happen before action: are we sure that after this event action can not be skipped (eg: because of some perms checking or some other events in chain?)
  Try to move them to "after" (eventually, patch operations: content/hide, ), or set up a two-phase logic:
  1. before action events sets up the sync-event in an "unconfirmed" state
  2. after action event moves the sync-event to "confirmed" state
. refactor error condition management so that we get both a number and a string across the whole chain from the transport layer to the templates (both source and target servers)
. fix: sending hide event sends an empty array encoded as json (same for setsection events). can we avoid this?
. use the same class to encode/decode objects on both source and target (90% there)


Phase 3:

. rest protocol: have source server use the "Fields" param in query string to limit data returned by target server and reduce bandwidth usage
. add script that inits a feed with a non-empty target server (creates init-node events based eg. on node paths)
. allow targets to be in "auto" mode, ie. sync events as soon as they are created, and in "delayed" mode too (sync via cronjob)
. add xmlrpc (?) and soap service layers
. review separation of checking inputs between controllers and models classes in target server
. review usage of return codes vs. exceptions
. test mode allowing a target server not to execute existing content triggers when importing objects - also set a class variable to tell when content/publish operation is executed in context of this extension
. tackle problem of not-atomic operations, eg. when a node-create-on-target fails, it might have
  in fact created the node but not set the remote-id. How (if) to rollback?
. enforce stricter checking rules for datatypes when updating content via rest, eg. min/max limits for integers etc...
  (i.e. the controls which are applied when editing via web but not in fromString methods)
. allow checknode view to reset/sanitize the existing events for a node if they do not match the existing ones
. state sync event: it would be nice if changing one state would not need for other states definitions to be present on target server
. add support for custom tags (in xmltext datatype) that store node/object id
. add a new view listing nodes to be sent in hierarchical fashion (content tree)
. add a php stream wrapper to allow easy access via php (non REST) to the API
. add rest routes to access single content fields
. realign the REST API with the final version of the eZ REST API v.2
. add some nice jquery/yui wrapper (automatically built if possible) to facilitate ajax usage
. prevent XSRF when using session-based auth plugin
. implement filters on the target server, so that both content attributes and content metadata can be hidden from output if wanted
